function [inputs] = DataExtendedKalmanFilter()

inputs.f = @(x,u)u/x;
inputs.h = @(x)x^2;

inputs.parameters.alpha = []; inputs.parameters.kappa = []; inputs.parameters.beta = []; 

m = 1000;
b = 50;
u = 500;
xstart = 1;


s = tf('s');
P_cruise = 1/(m*s+b);

Ts = 1/50;

dP_cruise = c2d(P_cruise,Ts,'zoh');
[F, B, H ,D] = ssdata(dP_cruise);

inputs.B = B;
inputs.H = H;
inputs.D = D;

inputs.xstart = 1;

inputs.Qk = 0.0005 * 10^2;
inputs.Rk = 0.00001 * 10^2;

inputs.u = 1;

inputs.w = mvnrnd(zeros(size(inputs.Qk, 1), 1), inputs.Qk);
inputs.v = mvnrnd(zeros(size(inputs.Rk, 1), 1), inputs.Rk);


inputs.P = eye(1);

inputs.x = inputs.f(xstart,u)


%z is the measurment of the true state xk
%inputs.xkmin1 = 1;

%subs(inputs.f,inputs.xkmin1,inputs.u)
%inputs.x = subs(inputs.f,inputs.xkmin1,inputs.u) + inputs.w;
%inputs.z = subs(inputs.h,inputs.x) + inputs.v;